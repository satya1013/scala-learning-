
1. Write a program to print all the prime numbers between two given numbers by creating a function.


def prime_checker(a:Int, b:Int):Unit = {
  
  for (i<- a to b){
    var flag = 0 ;
    for (j<-2 to i/2){
      
      if (i%j ==0){
        
        flag = flag+1
      }
    }
    if (flag == 0) println(i)

  }
}
prime_checker(1, 10)


2. Write a Program to print the Fibonacci sequence of a number.


def fibonacci(n:Int):Int = {
  if (n==0) 0
  else if (n==1 || n==2) 1
  else fibonacci(n-1) + fibonacci(n-2)
  
}
  
print(fibonacci(8))

4. Given a array of N positive integers and an integer X. The task is to find the frequency of X in Array.
Input:
N = 5
vector = {1, 1, 1, 1, 1}
X = 1
Output: 
5
Explanation: Frequency of 1 is 5.


var l1= List(1,1,1,1,1)
l1.groupBy(x => x).map(x => (x._1,x._2.length)).values.foreach(println)


5. Write the code using function in scala for below problems:-
	a. https://practice.geeksforgeeks.org/problems/peak-element/1



def peakElement(arr : Array[Int], n: Int): Int = {
  var index = -1
  for (i<- 0 to n-1){
     if (i == 0){
      if (arr(1)<arr(0)){
         index = 0
        }
    }
    else if  (i == n-1){
      if (arr(i)> arr(i-1)){
         index = (n-1)
        }
    }
    else {
      if (arr(i)>arr(i+1) && arr(i-1)<arr(i)){
        
         index = i
      }
    }
      
    
  

      
    }
  index
   
}
println(peakElement(Array(7,4, 9, 2, 1), 5))
	b. https://practice.geeksforgeeks.org/problems/subarray-with-given-sum-1587115621/1

import scala.util.control.Breaks._
def cont_sum(a:Array[Int], n:Int, s:Int):Unit = {
 var start = 0
 var end = 0
for (i<- 0 to n-1){
  var sum_a = a(i)
  breakable{
  for (j<- i+1 to n-1){
    
if (sum_a == s){
  start = i+1
  end = j
}
else if (sum_a> s || j == n-1)
break
sum_a = sum_a +a(j)

  }
  }
}
print(s" $start $end")
}
cont_sum(Array(1,2,3,4,5,8,9,10), 8,  15)


	c. https://practice.geeksforgeeks.org/problems/reverse-an-array/0


def rev(arr: Array[Int], n: Int): Array[Int] = {
  var arr1 = new Array[Int](n)
  for (i<- 0 to n-1){
    
    arr1(i) = arr(n-1-i)
  }
  arr1
}
for (j<- rev(Array(1,2,3,4), 4)){print(j + " ")}


	d. https://practice.geeksforgeeks.org/problems/sort-the-array0055/1 (using bubble sort, insertion sort and selection sort)
//bubble sort
def sort_func(arr: Array[Int], n:Int):Array[Int]={
  for (i <- 0 to (n-1)){
    for (j<- 0 to (n-i-2)){
    if(arr(j)> arr(j+1)){
      var temp = arr(j)
      arr(j) = arr(j+1)
      arr(j+1) = temp
    }
  }
}
arr
}
val arr = sort_func(Array(1,5,3,2),4)
for(i<- 0 to 3){print(arr(i) + " ")}
//insertion sort
def sort_func_ins(arr: Array[Int], n:Int):Array[Int]={
  for (i <- 1 to (n-1)){
    var key = arr(i)
    var j = i-1
    while (j<=0 && key < arr(j)){
      arr(j+1) = arr(j)
      j = j-1
    }
   arr(j+1) = key
  }
arr
}
val arr = sort_func_ins(Array(1,5,3,2),4)
for(i<- 0 to 3){print(arr(i) + " ")}

// selection sort
def sort_func_sel(arr: Array[Int], n:Int):Array[Int]={
  for (i <- 1 to (n-1)){
    var min_idx = i
    for (j <- i+1 to (n-1)){
      if (arr(min_idx)> arr(j)){min_idx = j}
    }
    var temp = arr(min_idx)
    arr(min_idx)  = arr(i)
    arr(i) =  temp
  
    
  }
arr
}
val arr = sort_func_sel(Array(1,5,3,2),4)
for(i<- 0 to 3){print(arr(i) + " ")}
  
  
	

        e. https://practice.geeksforgeeks.org/problems/longest-common-prefix-in-an-array5129/1
 

 def co_pr(arr: Array[String], n :Int): String = {
    var s = arr(0)
    for (i <- arr){
      
      if (s.length > i.length) {s = i}
    }
    for (i <- arr){
      if (i.contains(s)== false){
        while(i.contains(s)== false){
         s = s.substring(0, s.length-1)
         
         
        
  
      
      }
    }
    
  }
  s
  }
  print(co_pr(Array( "geeks", "geek", "geezer", "geeksforgeeks"), 4))
	

        f. https://practice.geeksforgeeks.org/problems/closest-strings0611/1



import scala.util.control.Breaks._
def min_dist(arr:Array[String], word1: String, word2: String):Int={
  var dist = -1
 breakable
 {
  for (i<-arr){
    if (i == word1){
      dist = 1
    }
    else if (i != word1 && i!= word2){
      dist = dist +1
    }
    else if (i== word2){
      break;
    }
    
  }
 
}
 dist
}
print(min_dist(Array( "the", "quick", "brown", "fox", 
     "quick"), "the", "fox"))


