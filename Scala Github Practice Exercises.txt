Github practice exercises
//should matchers
1.
true should be(true)

2.
val v1 = 4
v1 shouldEqual 4

3.
assert(2== 1 + 1)

//classes
4.
class ClassWithValParameter(val name: String)
val aClass = new ClassWithValParameter("Gandalf")
aClass.name should be(
"Gandalf"
)

//Options
5.
val someValue: Option[String] = Some("I am wrapped in something")
someValue should be(
Some("I am wrapped in something")
)

val emptyValue: Option[String] = None
emptyValue should be(
None
)


6.
val value1 = maybeItWillReturnSomething(true)
val value2 = maybeItWillReturnSomething(false)

value1 getOrElse "No value" should be(
"Found value"
)
value2 getOrElse "No value" should be(
"No value"
)
value2 getOrElse {
  "default function"
} should be(
"default function"
)


7.
val value1 = maybeItWillReturnSomething(true)
val value2 = maybeItWillReturnSomething(false)

value1.isEmpty should be(
false
)
value2.isEmpty should be(
true
)


8.
val someValue: Option[Double] = Some(20.0)
val value = someValue match {
  case Some(v) => v
  case None => 0.0
}
value should be(
20.0
)
val noValue: Option[Double] = None
val value1 = noValue match {
  case Some(v) => v
  case None => 0.0
}
value1 should be(
0.0
)


9.
val number: Option[Int] = Some(3)
val noNumber: Option[Int] = None
val result1 = number.map(_ * 1.5)
val result2 = noNumber.map(_ * 1.5)

result1 should be(
Some(4.5)
)
result2 should be(
None
)


10.
val number: Option[Int] = Some(3)
val noNumber: Option[Int] = None
val result1 = number.fold(1)(_ * 3)
val result2 = noNumber.fold(1)(_ * 3)

result1 should be(
9
)
result2 should be(
1
)


//Objects
11.
object Greeting {
  def english = "Hi"

  def espanol = "Hola"

}

Greeting.english should be(
"Hi"
)
Greeting.espanol should be(
"Hola"
)



12.
object Greeting {
  def english = "Hi"

  def espanol = "Hola"
}

val x = Greeting
val y = x

x eq y should be(
true
) //Reminder: eq checks for reference

val z = Greeting

x eq z should be(
true
)















